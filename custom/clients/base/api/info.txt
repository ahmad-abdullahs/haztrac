<?php

if (!defined('sugarEntry') || !sugarEntry)
    die('Not A Valid Entry Point');

require_once("clients/base/api/RelateRecordApi.php");

class CustomRelateRecordApi extends RelateRecordApi {

    public function registerApiRest() {
        return parent::registerApiRest();
//        return array_merge(parent::registerApiRest(), array(
//            'createCopyAndRelatedLinks' => array(
//                'reqType' => 'POST',
//                'path' => array('<module>', '?', 'copy_and_link'),
//                'pathVars' => array('module', 'record', ''),
//                'method' => 'createCopyAndRelatedLinks',
//                'shortHelp' => 'Relates existing records to this module.',
//                'longHelp' => 'include/api/help/module_record_link_post_help.html',
//            ),
//        ));
    }

    public function createRelatedLinks(ServiceBase $api, array $args, $securityTypeLocal = 'view', $securityTypeRemote = 'view') {
        $this->requireArgs($args, array('ids'));
        $ids = $this->normalizeLinkIds($args['ids']);

        $result = array(
            'related_records' => array(),
        );

        $primaryBean = $this->loadBean($api, $args);

        list($linkName) = $this->checkRelatedSecurity(
                $api, $args, $primaryBean, $securityTypeLocal, $securityTypeRemote
        );
        $relatedModuleName = $primaryBean->$linkName->getRelatedModuleName();

        foreach ($ids as $id => $additionalValues) {
            $relatedBean = BeanFactory::retrieveBean($relatedModuleName, $id);

            if (!$relatedBean || $relatedBean->deleted) {
                throw new SugarApiExceptionNotFound('Could not find the related bean');
            }

            $relatedData = $this->getRelatedFields($api, $args, $primaryBean, $linkName, $relatedBean);

            $primaryBean->$linkName->add(array($relatedBean), array_merge($relatedData, $additionalValues));

            // ++
            // Code is added to create the RevenueLineItems relationship with account when the RevenueLineItems is 
            // selected from the selection list, the account will be the parent record account on which the selection
            // drawer is pulled up.
            if ($relatedBean->module_dir == 'RevenueLineItems') {
                if ($args['module'] == 'sales_and_services' || $args['module'] == 'RevenueLineItems') {
                    $relatedBean = BeanFactory::retrieveBean($relatedBean->module_dir, $relatedBean->id);
                    $relatedBean->load_relationship('account_link');
                    $relatedBean->account_link->add($additionalValues['account_id']);
                }
            }
            $result['related_records'][] = $this->formatBean($api, $args, $relatedBean);
        }
        //Clean up any hanging related records.
        SugarRelationship::resaveRelatedBeans();

        $result['record'] = $this->formatBean($api, $args, $primaryBean);

        return $result;
    }

    public function createCopyAndRelatedLinks(ServiceBase $api, array $args, $securityTypeLocal = 'view', $securityTypeRemote = 'view') {
        $this->requireArgs($args, array('ids'));
        $ids = $this->normalizeLinkIds($args['ids']);

        $result = array(
            'related_records' => array(),
        );

        $primaryBean = $this->loadBean($api, $args);

        list($linkName) = $this->checkRelatedSecurity(
                $api, $args, $primaryBean, $securityTypeLocal, $securityTypeRemote
        );
        $relatedModuleName = $primaryBean->$linkName->getRelatedModuleName();

        foreach ($ids as $id => $additionalValues) {
            $relatedBean = BeanFactory::retrieveBean($relatedModuleName, $id);

            // https://community.sugarcrm.com/thread/20139
            // https://community.sugarcrm.com/docs/DOC-4184-did-you-know-copying-related-records-is-a-breeze (Read the note carefully)
            // https://support.sugarcrm.com/Documentation/Sugar_Developer/Sugar_Developer_Guide_8.3/Data_Framework/Models/SugarBean/

//            if (isset($args['copyLinkRecords']) && $args['copyLinkRecords']) {
//                // Each time first make the copy of the $relatedBean...
//                // Get the copy of bean...
//                $bean = $this->getBeanCopy($relatedBean);
//                $beanID = $bean->save();
//
//                $relatedBean = BeanFactory::retrieveBean($relatedModuleName, $beanID);
//            }


            if (!$relatedBean || $relatedBean->deleted) {
                throw new SugarApiExceptionNotFound('Could not find the related bean');
            }

            $relatedData = $this->getRelatedFields($api, $args, $primaryBean, $linkName, $relatedBean);

            $primaryBean->$linkName->add(array($relatedBean), array_merge($relatedData, $additionalValues));

            // ++
            // Code is added to create the RevenueLineItems relationship with account when the RevenueLineItems is 
            // selected from the selection list, the account will be the parent record account on which the selection
            // drawer is pulled up.
            if ($relatedBean->module_dir == 'RevenueLineItems') {
                if ($args['module'] == 'sales_and_services' || $args['module'] == 'RevenueLineItems') {
                    $relatedBean = BeanFactory::retrieveBean($relatedBean->module_dir, $relatedBean->id);
                    $relatedBean->load_relationship('account_link');
                    $relatedBean->account_link->add($additionalValues['account_id']);
                }
            }
            $result['related_records'][] = $this->formatBean($api, $args, $relatedBean);
        }
        //Clean up any hanging related records.
        SugarRelationship::resaveRelatedBeans();

        $result['record'] = $this->formatBean($api, $args, $primaryBean);

        return $result;
    }

    public function getBeanCopy($relatedBean) {
        // Create bean
        $bean = BeanFactory::newBean($relatedBean->module_dir);
        $bean = $relatedBean;
        // Set the new flag
        $bean->new_with_id = true;
        // Set the record id with a static id
        $bean->id = create_guid();
        return $bean;
    }

    /*
     *  Note: Careful when relating records via relationship rather than just adding parent_id.
     *  When you save a relationship the after_save logic hook triggers again getting into an infinite loop.
     *  The way out is checking isUpdate as Paperless suggested, the isUpdate will be true when adding the relationship.
     *
     *  Here is my example, in this example, when Copy is used on an Opportunity I duplicate related Opportunity Products and
     *  I relate all Contacts that were related to that Opportunity to the new one that I just created via the copy.
     */

    public function copyOppProducts($bean, $event, $arguments) {
        //bean = the Opportunity we just create
        //o = the Opportunity we copied to create this one
        //product = the product/s linked to o
        //op = the new products we created from copies of product  to be linked to the bean we just created
        $GLOBALS['log']->fatal("copyOppProducts::" . print_r($arguments, true));
        include_once('custom/entry_points/Utils/getRelationshipByModules.php');
        //need to check if isUpdate, the addition of the relationship triggers the after_save causing a loop
        //but the relationship add is an update, so skip this if you're updating.
        if (!$arguments['isUpdate'] && preg_match('/picture_duplicateBeanId/', $_SERVER['QUERY_STRING'])) { //we are copying an existing Opp
            $GLOBALS['log']->fatal("copyOppProducts -- it's a copy:: " . $_SERVER['QUERY_STRING']);
            $split = explode('&', $_SERVER['QUERY_STRING']);
            foreach ($split as $k) {
                $GLOBALS['log']->fatal("copyOppProducts -- k " . $k);
                if (preg_match('/picture_duplicateBeanId/', $k)) {
                    $aid = explode('=', $k);
                    $id = $aid[1]; //the id of the original record
                    continue;
                }
            }
            //get the opp we just copied
            $o = BeanFactory::retrieveBean('Opportunities', $id);
            //Copy Opportunity Products
            list ($rel, $m1) = getRelationshipByModules('oppp_Opportunity_Products', 'Opportunities');
            if ($o->load_relationship($rel)) {
                //loop through the products linked to the original Opp
                foreach ($o->$rel->getBeans() as $product) {
                    $op = BeanFactory::newBean('oppp_Opportunity_Products');
                    //copy the product 
                    $op->name = $product->name;
                    $op->description = $product->description;
                    $op->license_type = $product->license_type;
                    $op->site = $product->site;
                    $op->subscription = $product->subscription;
                    $op->product = $product->product;
                    $op->value = $product->value;
                    $op->save();
                    //relate the product to the new Opp we just created
                    if ($op->load_relationship($rel)) {
                        $GLOBALS['log']->fatal("Relate Opp Product to Bean");
                        $op->$rel->add($bean->id);
                    }
                }
            }
            //Relate Contacts from copy to this bean
            list ($crel, $cm1) = getRelationshipByModules('Contacts', 'Opportunities');
            $GLOBALS['log']->fatal("Relate Contact to Opp::{$crel}");
            if ($o->load_relationship($crel)) {
                $GLOBALS['log']->fatal("Relate Contact to Opp::{$crel} Loaded");
                foreach ($o->$crel->getBeans() as $contact) {
                    $GLOBALS['log']->fatal("About to Relate Contact {$contact->first_name}  to Opp");
                    if ($bean->load_relationship($crel)) {
                        $GLOBALS['log']->fatal("Relate Contact {$contact->first_name}  to Opp");
                        $bean->$crel->add($contact->id);
                    }
                }
            }
        }
    }

}
